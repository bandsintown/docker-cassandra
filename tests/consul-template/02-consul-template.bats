#!/usr/bin/env bats
load helpers

# Declare the service
consul_service="consul"
address="$(dig +short ${consul_service})"
port="8500"
service="cassandra"

@test "Check '/etc/cassandra/cassandra.yml' configuration is well rendered" {

  template="/etc/consul-template/templates/cassandra.ctmpl"
  file="/etc/cassandra/cassandra.yaml"

  # Remove the default configuration
  status=$(rm -f ${file};echo $?)
  [ "$status" -eq 0 ]

  # Call consul template to generate the configuration
  status=$(consul-template -consul-addr ${consul_service}:8500 -template ${template}:${file} -once;echo $?)
  [ "$status" -eq 0 ]

  # Check the expected configuration has been generated by consul-template
  status=$(test -f ${file};echo $?)
  [ "$status" -eq 0 ]

  # Check the rpc_address is 0.0.0.0
  status=$(grep "rpc_address: 0.0.0.0" ${file} 2>&1 > /dev/null;echo $?)
  [ "$status" -eq 0 ]

  # Check the broadcast_rpc_address is private host ip
  status=$(grep "broadcast_rpc_address: $(hostname --ip-address)" ${file} 2>&1 > /dev/null;echo $?)
  [ "$status" -eq 0 ]

  # Check the broadcast_address is private host ip
  status=$(grep "broadcast_address: $(hostname --ip-address)" ${file} 2>&1 > /dev/null;echo $?)
  [ "$status" -eq 0 ]

  # Check the listen_address is private host ip
  status=$(grep "listen_address: $(hostname --ip-address)" ${file} 2>&1 > /dev/null;echo $?)
  [ "$status" -eq 0 ]
}

@test "Check '/etc/cassandra/cassandra-rackdc.properties' configuration is well rendered" {

  template="/etc/consul-template/templates/cassandra-rackdc.ctmpl"
  file="/etc/cassandra/cassandra-rackdc.properties"

  # Remove the default configuration
  status=$(rm -f ${file};echo $?)
  [ "$status" -eq 0 ]

  # Call consul template to generate the configuration
  status=$(consul-template -consul-addr ${consul_service}:8500 -template ${template}:${file} -once;echo $?)
  [ "$status" -eq 0 ]

  # Check the expected configuration has been generated by consul-template
  status=$(test -f ${file};echo $?)
  [ "$status" -eq 0 ]
}
